#!/bin/bash

# Comprehensive Grip Installation and Functionality Test Script

set -e

SCRIPT_DIR="$(dirname "$0")"
DOTFILES_DIR="$(dirname "$SCRIPT_DIR")"
TEST_DIR="/tmp/grip-functionality-test"
TEST_PORT=6420  # Use different port than default to avoid conflicts

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Test functions
test_installation() {
    log_info "Testing grip installation..."
    
    if ! command -v grip &> /dev/null; then
        log_error "grip command not found in PATH"
        log_info "Available Python tools:"
        ls -la $(brew --prefix)/bin/ | grep -i python || true
        return 1
    fi
    
    log_success "grip command found: $(which grip)"
    
    # Test version
    local version=$(grip --version 2>&1 || echo "version check failed")
    log_info "Grip version: $version"
    
    return 0
}

test_python_environment() {
    log_info "Testing Python environment..."
    
    # Check Python version
    local python_version=$(python3 --version 2>&1)
    log_info "Python version: $python_version"
    
    # Check if grip's Python dependencies are accessible
    python3 -c "import grip; print('Grip Python module accessible')" 2>/dev/null && \
        log_success "Grip Python module is properly accessible" || \
        log_warning "Grip Python module test failed (may be normal for Homebrew install)"
    
    return 0
}

create_test_content() {
    log_info "Creating test markdown content..."
    
    rm -rf "$TEST_DIR"
    mkdir -p "$TEST_DIR"
    
    # Create comprehensive test markdown
    cat > "$TEST_DIR/test.md" << 'EOF'
# Grip Functionality Test

This document tests various GitHub Markdown features that grip should render correctly.

## Basic Formatting

**Bold text**, *italic text*, and ***bold italic***.

~~Strikethrough text~~

`inline code` and normal text.

## Code Blocks

```bash
#!/bin/bash
echo "Hello, World!"
for i in {1..5}; do
    echo "Count: $i"
done
```

```python
def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n-1) + fibonacci(n-2)

print(f"Fibonacci(10) = {fibonacci(10)}")
```

## Mermaid Diagrams

```mermaid
graph TD
    A[Start] --> B{Condition?}
    B -->|Yes| C[Action 1]
    B -->|No| D[Action 2]
    C --> E[End]
    D --> E
```

```mermaid
sequenceDiagram
    participant U as User
    participant B as Browser
    participant G as Grip
    participant GH as GitHub API
    
    U->>B: Opens markdown file
    B->>G: Requests rendered HTML
    G->>GH: Fetches GitHub styles
    GH-->>G: Returns CSS/JS
    G-->>B: Renders markdown
    B-->>U: Displays preview
```

## Lists

### Unordered List
- Item 1
- Item 2
  - Nested item 2.1
  - Nested item 2.2
- Item 3

### Ordered List
1. First item
2. Second item
   1. Nested item 2.1
   2. Nested item 2.2
3. Third item

### Task List
- [x] Completed task
- [ ] Incomplete task
- [x] Another completed task

## Tables

| Feature | Status | Notes |
|---------|--------|-------|
| Basic markdown | âœ… | Working |
| Code highlighting | âœ… | Working |
| Mermaid diagrams | ðŸ”„ | Testing |
| Live reload | ðŸ”„ | Testing |
| GitHub styling | âœ… | Working |

## Links and Images

[GitHub](https://github.com) external link.

[Local link](#basic-formatting) to section.

## Blockquotes

> This is a blockquote.
> 
> It can span multiple lines.
> 
> > Nested blockquotes are also supported.

## Horizontal Rule

---

## Math (if supported)

Inline math: $E = mc^2$

Block math:
$$
\sum_{i=1}^{n} i = \frac{n(n+1)}{2}
$$

## Emojis

:smile: :rocket: :heart: :+1:

## End of Test

If you can see all the above content properly formatted with GitHub styling, grip is working correctly!
EOF

    log_success "Test content created at: $TEST_DIR/test.md"
    return 0
}

test_server_functionality() {
    log_info "Testing grip server functionality..."
    
    # Find free port
    local port=$TEST_PORT
    while lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; do
        port=$((port + 1))
        if [ $port -gt 65535 ]; then
            log_error "No free ports available for testing"
            return 1
        fi
    done
    
    log_info "Using port $port for testing"
    
    # Start grip server in background
    cd "$TEST_DIR"
    grip test.md $port &
    local grip_pid=$!
    
    log_info "Started grip server (PID: $grip_pid)"
    
    # Wait for server to start
    local max_attempts=10
    local attempt=0
    while [ $attempt -lt $max_attempts ]; do
        if curl -s "http://localhost:$port" >/dev/null 2>&1; then
            log_success "Server is responding"
            break
        fi
        sleep 1
        attempt=$((attempt + 1))
        log_info "Waiting for server to start... ($attempt/$max_attempts)"
    done
    
    if [ $attempt -eq $max_attempts ]; then
        log_error "Server failed to start within $max_attempts seconds"
        kill $grip_pid 2>/dev/null || true
        return 1
    fi
    
    # Test server response
    local response=$(curl -s -w "%{http_code}" "http://localhost:$port" -o /dev/null)
    if [ "$response" = "200" ]; then
        log_success "Server returned HTTP 200 OK"
    else
        log_error "Server returned HTTP $response"
        kill $grip_pid 2>/dev/null || true
        return 1
    fi
    
    # Test that content is rendered
    local content=$(curl -s "http://localhost:$port")
    if echo "$content" | grep -q "Grip Functionality Test"; then
        log_success "Content is properly rendered"
    else
        log_error "Content rendering test failed"
        kill $grip_pid 2>/dev/null || true
        return 1
    fi
    
    # Test mermaid diagram presence (GitHub should inject mermaid support)
    if echo "$content" | grep -q -i "mermaid"; then
        log_success "Mermaid diagram support detected"
    else
        log_warning "Mermaid diagram support not detected (may be normal)"
    fi
    
    # Stop server
    kill $grip_pid 2>/dev/null || true
    wait $grip_pid 2>/dev/null || true
    log_success "Server stopped successfully"
    
    return 0
}

test_wrapper_script() {
    log_info "Testing grip-preview wrapper script..."
    
    local wrapper_script="$DOTFILES_DIR/bin/grip-preview"
    
    # Handle relative path when running from dotfiles directory
    if [ ! -f "$wrapper_script" ] && [ -f "./bin/grip-preview" ]; then
        wrapper_script="./bin/grip-preview"
    fi
    
    if [ ! -x "$wrapper_script" ]; then
        log_error "Wrapper script not found or not executable: $wrapper_script"
        return 1
    fi
    
    log_success "Wrapper script found and executable"
    
    # Test help functionality
    if "$wrapper_script" --help | grep -q "grip-preview"; then
        log_success "Wrapper script help works"
    else
        log_error "Wrapper script help failed"
        return 1
    fi
    
    return 0
}

test_github_api_access() {
    log_info "Testing GitHub API access..."
    
    # Test without token (should work but with rate limits)
    local api_response=$(curl -s -w "%{http_code}" "https://api.github.com/rate_limit" -o /tmp/github_api_test.json)
    
    if [ "$api_response" = "200" ]; then
        local remaining=$(jq -r '.rate.remaining // "unknown"' /tmp/github_api_test.json 2>/dev/null || echo "unknown")
        log_success "GitHub API accessible (remaining: $remaining requests)"
        
        if [ "$remaining" = "unknown" ] || [ "$remaining" -lt 10 ]; then
            log_warning "Low API rate limit. Consider setting GRIP_TOKEN environment variable"
            log_info "Get token at: https://github.com/settings/tokens"
        fi
    else
        log_warning "GitHub API access test failed (HTTP $api_response)"
        log_info "This may affect grip's ability to render with GitHub styling"
    fi
    
    rm -f /tmp/github_api_test.json
    return 0
}

cleanup() {
    log_info "Cleaning up test files..."
    rm -rf "$TEST_DIR"
    
    # Kill any remaining grip processes on test port
    local pids=$(lsof -ti :$TEST_PORT 2>/dev/null || true)
    if [ -n "$pids" ]; then
        echo "$pids" | xargs kill 2>/dev/null || true
        log_info "Cleaned up any remaining test processes"
    fi
}

run_all_tests() {
    log_info "Starting comprehensive grip functionality tests..."
    echo ""
    
    local failed_tests=0
    
    # Test installation
    if ! test_installation; then
        ((failed_tests++))
    fi
    echo ""
    
    # Test Python environment
    if ! test_python_environment; then
        ((failed_tests++))
    fi
    echo ""
    
    # Create test content
    if ! create_test_content; then
        ((failed_tests++))
    fi
    echo ""
    
    # Test server functionality
    if ! test_server_functionality; then
        ((failed_tests++))
    fi
    echo ""
    
    # Test wrapper script
    if ! test_wrapper_script; then
        ((failed_tests++))
    fi
    echo ""
    
    # Test GitHub API access
    if ! test_github_api_access; then
        ((failed_tests++))
    fi
    echo ""
    
    # Summary
    if [ $failed_tests -eq 0 ]; then
        log_success "All tests passed! Grip is properly installed and functional."
        echo ""
        log_info "Try it out:"
        echo "  grip-preview $TEST_DIR/test.md --browser"
        echo ""
        log_info "For Neovim integration, add to your config:"
        echo "  vim.keymap.set('n', '<leader>mp', ':!grip-preview % --browser<CR>', { desc = 'Preview markdown' })"
    else
        log_error "$failed_tests test(s) failed. Check the output above for details."
        echo ""
        log_info "Troubleshooting:"
        echo "  1. Reinstall grip: ~/.dotfiles/install/grip.sh"
        echo "  2. Check Python setup: python3 --version"
        echo "  3. Check Homebrew: brew list | grep grip"
        echo "  4. Set GitHub token: export GRIP_TOKEN=your_token"
    fi
    
    return $failed_tests
}

# Handle script arguments
case "$1" in
    "--help"|"-h")
        echo "grip-test - Comprehensive grip functionality tester"
        echo ""
        echo "Usage: grip-test [options]"
        echo ""
        echo "Options:"
        echo "  --help, -h          Show this help"
        echo "  --install-only      Test installation only"
        echo "  --server-only       Test server functionality only"
        echo "  --no-cleanup        Don't cleanup test files"
        echo ""
        exit 0
        ;;
    "--install-only")
        test_installation
        exit $?
        ;;
    "--server-only")
        create_test_content
        test_server_functionality
        cleanup
        exit $?
        ;;
    "--no-cleanup")
        run_all_tests
        exit $?
        ;;
    *)
        trap cleanup EXIT
        run_all_tests
        exit $?
        ;;
esac